
DROP TABLE ORDERLINE;
DROP TABLE ORDER_LINE;
DROP TABLE Invoice;
DROP TABLE SALES_ORDER;
CREATE TABLE SALES_ORDER (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id NUMBER NOT NULL,
    order_date TIMESTAMP DEFAULT SYSTIMESTAMP,
    status VARCHAR2(20) DEFAULT 'PENDING'
);

CREATE TABLE OrderLine (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER REFERENCES SALES_ORDER(id) ON DELETE CASCADE,
    product_id NUMBER NOT NULL,
    quantity NUMBER DEFAULT 1 CHECK (quantity > 0),
    unit_price DECIMAL(10, 2),
    total_price DECIMAL(10, 2) GENERATED ALWAYS AS (quantity * unit_price) VIRTUAL
);

CREATE TABLE Invoice (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id NUMBER REFERENCES SALES_ORDER(id) ON DELETE CASCADE,
    invoice_date TIMESTAMP DEFAULT SYSTIMESTAMP
);

SELECT * FROM SALES_ORDER WHERE CUSTOMER_ID = 3;

SELECT * FROM SALES_ORDER so INNER JOIN ORDERLINE ol ON so.ID = ol.ORDER_ID
WHERE SO.customer_Id = 3;

-- Script to wipe all data from ORDERLINE, SALES_ORDER, and INVOICE tables
DELETE FROM ORDERLINE;
DELETE FROM SALES_ORDER;
DELETE FROM INVOICE;

select * from invoice;


select count(*), customer_id, STATUS from sales_order group by customer_id,status;

-- Reset auto-generated IDs (if necessary, depending on the database)
ALTER TABLE ORDERLINE MODIFY ID GENERATED BY DEFAULT AS IDENTITY (START WITH 1);
ALTER TABLE SALES_ORDER MODIFY ID GENERATED BY DEFAULT AS IDENTITY (START WITH 1);
ALTER TABLE INVOICE MODIFY ID GENERATED BY DEFAULT AS IDENTITY (START WITH 1);

-- Scenario 1: Many Orders, One Line Each
DECLARE
    v_order_id NUMBER;
BEGIN
    -- Insert 10,000 sales orders, each with one order line
    FOR i IN 1..10000 LOOP
        INSERT INTO SALES_ORDER (CUSTOMER_ID, STATUS) VALUES (1, 'PENDING')
        RETURNING id INTO v_order_id;

        INSERT INTO ORDERLINE (ORDER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE)
        VALUES (v_order_id, 1000 + i, 1, 50.0 + i);
    END LOOP;
END;
/

-- Scenario 2: Many Orders, Many Lines Each
DECLARE
    v_order_id NUMBER;
BEGIN
    -- Insert 1,000 sales orders, each with 100 order lines
    FOR i IN 1..1000 LOOP
        INSERT INTO SALES_ORDER (CUSTOMER_ID, STATUS) VALUES (2, 'PENDING')
        RETURNING id INTO v_order_id;

        FOR j IN 1..100 LOOP
            INSERT INTO ORDERLINE (ORDER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE)
            VALUES (v_order_id, 2000 + j, j, 30.0 + j);
        END LOOP;
    END LOOP;
END;
/

-- Scenario 3: One Order, One Line
DECLARE
    v_order_id NUMBER;
BEGIN
    -- Insert one sales order for Customer 3
    INSERT INTO SALES_ORDER (CUSTOMER_ID, STATUS) VALUES (3, 'PENDING')
    RETURNING id INTO v_order_id;

    -- Insert one order line for the single sales order
    INSERT INTO ORDERLINE (ORDER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE)
    VALUES (v_order_id, 3001, 1, 75.0);
END;
/

-- Scenario 4: One Order, Many Lines
DECLARE
    v_order_id NUMBER;
BEGIN
    -- Insert one sales order for Customer 4
    INSERT INTO SALES_ORDER (CUSTOMER_ID, STATUS) VALUES (4, 'PENDING')
    RETURNING id INTO v_order_id;

    -- Insert 10,000 order lines for the single sales order
    FOR i IN 1..10000 LOOP
        INSERT INTO ORDERLINE (ORDER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE)
        VALUES (v_order_id, 4000 + i, i, 20.0 + i);
    END LOOP;
END;
/

alter table sales_order
rename column ID to ORDER_ID;
alter table orderline
rename to ORDER_LINE;